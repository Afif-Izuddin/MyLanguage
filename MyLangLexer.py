# Generated from c:/Users/izudd/Desktop/MyLanguage- (2)/MyLang.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,40,284,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,
        1,4,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,1,8,
        1,8,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,
        1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,22,
        1,22,1,22,1,22,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,24,
        1,24,1,25,1,25,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,
        1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,
        1,28,1,28,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,1,30,1,30,
        1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,3,31,225,8,31,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,236,8,32,1,33,4,33,
        239,8,33,11,33,12,33,240,1,34,1,34,1,34,1,34,5,34,247,8,34,10,34,
        12,34,250,9,34,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,38,5,38,263,8,38,10,38,12,38,266,9,38,1,39,1,39,1,39,3,39,271,
        8,39,1,40,4,40,274,8,40,11,40,12,40,275,1,40,1,40,1,41,3,41,281,
        8,41,1,41,1,41,0,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,
        10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,
        21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,
        32,65,33,67,34,69,35,71,36,73,0,75,0,77,37,79,38,81,39,83,40,1,0,
        5,4,0,37,37,42,43,45,45,47,47,2,0,60,60,62,62,4,0,10,10,13,13,34,
        34,92,92,3,0,65,90,95,95,97,122,3,0,9,10,13,13,32,32,295,0,1,1,0,
        0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
        0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,
        3,87,1,0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,95,1,0,0,
        0,13,98,1,0,0,0,15,103,1,0,0,0,17,106,1,0,0,0,19,111,1,0,0,0,21,
        114,1,0,0,0,23,118,1,0,0,0,25,120,1,0,0,0,27,122,1,0,0,0,29,124,
        1,0,0,0,31,126,1,0,0,0,33,128,1,0,0,0,35,134,1,0,0,0,37,140,1,0,
        0,0,39,144,1,0,0,0,41,148,1,0,0,0,43,156,1,0,0,0,45,162,1,0,0,0,
        47,169,1,0,0,0,49,172,1,0,0,0,51,177,1,0,0,0,53,184,1,0,0,0,55,189,
        1,0,0,0,57,197,1,0,0,0,59,208,1,0,0,0,61,213,1,0,0,0,63,224,1,0,
        0,0,65,235,1,0,0,0,67,238,1,0,0,0,69,242,1,0,0,0,71,253,1,0,0,0,
        73,255,1,0,0,0,75,257,1,0,0,0,77,259,1,0,0,0,79,270,1,0,0,0,81,273,
        1,0,0,0,83,280,1,0,0,0,85,86,5,61,0,0,86,2,1,0,0,0,87,88,5,40,0,
        0,88,4,1,0,0,0,89,90,5,41,0,0,90,6,1,0,0,0,91,92,5,123,0,0,92,8,
        1,0,0,0,93,94,5,125,0,0,94,10,1,0,0,0,95,96,5,105,0,0,96,97,5,110,
        0,0,97,12,1,0,0,0,98,99,5,102,0,0,99,100,5,114,0,0,100,101,5,111,
        0,0,101,102,5,109,0,0,102,14,1,0,0,0,103,104,5,116,0,0,104,105,5,
        111,0,0,105,16,1,0,0,0,106,107,5,115,0,0,107,108,5,116,0,0,108,109,
        5,101,0,0,109,110,5,112,0,0,110,18,1,0,0,0,111,112,5,47,0,0,112,
        113,5,47,0,0,113,20,1,0,0,0,114,115,5,47,0,0,115,116,5,47,0,0,116,
        117,5,47,0,0,117,22,1,0,0,0,118,119,5,91,0,0,119,24,1,0,0,0,120,
        121,5,44,0,0,121,26,1,0,0,0,122,123,5,93,0,0,123,28,1,0,0,0,124,
        125,5,58,0,0,125,30,1,0,0,0,126,127,5,63,0,0,127,32,1,0,0,0,128,
        129,5,108,0,0,129,130,5,105,0,0,130,131,5,109,0,0,131,132,5,105,
        0,0,132,133,5,116,0,0,133,34,1,0,0,0,134,135,5,119,0,0,135,136,5,
        104,0,0,136,137,5,105,0,0,137,138,5,108,0,0,138,139,5,101,0,0,139,
        36,1,0,0,0,140,141,5,102,0,0,141,142,5,111,0,0,142,143,5,114,0,0,
        143,38,1,0,0,0,144,145,5,108,0,0,145,146,5,101,0,0,146,147,5,116,
        0,0,147,40,1,0,0,0,148,149,5,101,0,0,149,150,5,108,0,0,150,151,5,
        115,0,0,151,152,5,101,0,0,152,153,5,32,0,0,153,154,5,105,0,0,154,
        155,5,102,0,0,155,42,1,0,0,0,156,157,5,112,0,0,157,158,5,114,0,0,
        158,159,5,105,0,0,159,160,5,110,0,0,160,161,5,116,0,0,161,44,1,0,
        0,0,162,163,5,114,0,0,163,164,5,101,0,0,164,165,5,116,0,0,165,166,
        5,117,0,0,166,167,5,114,0,0,167,168,5,110,0,0,168,46,1,0,0,0,169,
        170,5,105,0,0,170,171,5,102,0,0,171,48,1,0,0,0,172,173,5,101,0,0,
        173,174,5,108,0,0,174,175,5,115,0,0,175,176,5,101,0,0,176,50,1,0,
        0,0,177,178,5,115,0,0,178,179,5,119,0,0,179,180,5,105,0,0,180,181,
        5,116,0,0,181,182,5,99,0,0,182,183,5,104,0,0,183,52,1,0,0,0,184,
        185,5,99,0,0,185,186,5,97,0,0,186,187,5,115,0,0,187,188,5,101,0,
        0,188,54,1,0,0,0,189,190,5,100,0,0,190,191,5,101,0,0,191,192,5,102,
        0,0,192,193,5,97,0,0,193,194,5,117,0,0,194,195,5,108,0,0,195,196,
        5,116,0,0,196,56,1,0,0,0,197,198,5,101,0,0,198,199,5,110,0,0,199,
        200,5,100,0,0,200,201,5,32,0,0,201,202,5,115,0,0,202,203,5,119,0,
        0,203,204,5,105,0,0,204,205,5,116,0,0,205,206,5,99,0,0,206,207,5,
        104,0,0,207,58,1,0,0,0,208,209,5,112,0,0,209,210,5,97,0,0,210,211,
        5,115,0,0,211,212,5,115,0,0,212,60,1,0,0,0,213,214,7,0,0,0,214,62,
        1,0,0,0,215,225,7,1,0,0,216,217,5,61,0,0,217,225,5,61,0,0,218,219,
        5,33,0,0,219,225,5,61,0,0,220,221,5,62,0,0,221,225,5,61,0,0,222,
        223,5,60,0,0,223,225,5,61,0,0,224,215,1,0,0,0,224,216,1,0,0,0,224,
        218,1,0,0,0,224,220,1,0,0,0,224,222,1,0,0,0,225,64,1,0,0,0,226,227,
        5,116,0,0,227,228,5,114,0,0,228,229,5,117,0,0,229,236,5,101,0,0,
        230,231,5,102,0,0,231,232,5,97,0,0,232,233,5,108,0,0,233,234,5,115,
        0,0,234,236,5,101,0,0,235,226,1,0,0,0,235,230,1,0,0,0,236,66,1,0,
        0,0,237,239,3,75,37,0,238,237,1,0,0,0,239,240,1,0,0,0,240,238,1,
        0,0,0,240,241,1,0,0,0,241,68,1,0,0,0,242,248,5,34,0,0,243,247,8,
        2,0,0,244,245,5,92,0,0,245,247,9,0,0,0,246,243,1,0,0,0,246,244,1,
        0,0,0,247,250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,251,1,
        0,0,0,250,248,1,0,0,0,251,252,5,34,0,0,252,70,1,0,0,0,253,254,5,
        45,0,0,254,72,1,0,0,0,255,256,7,3,0,0,256,74,1,0,0,0,257,258,2,48,
        57,0,258,76,1,0,0,0,259,264,3,73,36,0,260,263,3,73,36,0,261,263,
        3,75,37,0,262,260,1,0,0,0,262,261,1,0,0,0,263,266,1,0,0,0,264,262,
        1,0,0,0,264,265,1,0,0,0,265,78,1,0,0,0,266,264,1,0,0,0,267,271,3,
        67,33,0,268,271,3,69,34,0,269,271,3,65,32,0,270,267,1,0,0,0,270,
        268,1,0,0,0,270,269,1,0,0,0,271,80,1,0,0,0,272,274,7,4,0,0,273,272,
        1,0,0,0,274,275,1,0,0,0,275,273,1,0,0,0,275,276,1,0,0,0,276,277,
        1,0,0,0,277,278,6,40,0,0,278,82,1,0,0,0,279,281,5,13,0,0,280,279,
        1,0,0,0,280,281,1,0,0,0,281,282,1,0,0,0,282,283,5,10,0,0,283,84,
        1,0,0,0,11,0,224,235,240,246,248,262,264,270,275,280,1,6,0,0
    ]

class MyLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    LIMIT = 17
    WHILE = 18
    FOR = 19
    LET = 20
    ELIF = 21
    PRINT = 22
    RETURN = 23
    IF = 24
    ELSE = 25
    SWITCH = 26
    CASE = 27
    DEFAULT = 28
    END_SWITCH = 29
    PASS = 30
    OPERATOR = 31
    COMPARISON_OP = 32
    BOOLEAN = 33
    INT = 34
    STRING = 35
    MINUS = 36
    ID = 37
    LITERAL = 38
    WS = 39
    NEWLINE = 40

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'('", "')'", "'{'", "'}'", "'in'", "'from'", "'to'", 
            "'step'", "'//'", "'///'", "'['", "','", "']'", "':'", "'?'", 
            "'limit'", "'while'", "'for'", "'let'", "'else if'", "'print'", 
            "'return'", "'if'", "'else'", "'switch'", "'case'", "'default'", 
            "'end switch'", "'pass'", "'-'" ]

    symbolicNames = [ "<INVALID>",
            "LIMIT", "WHILE", "FOR", "LET", "ELIF", "PRINT", "RETURN", "IF", 
            "ELSE", "SWITCH", "CASE", "DEFAULT", "END_SWITCH", "PASS", "OPERATOR", 
            "COMPARISON_OP", "BOOLEAN", "INT", "STRING", "MINUS", "ID", 
            "LITERAL", "WS", "NEWLINE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "LIMIT", "WHILE", "FOR", "LET", "ELIF", 
                  "PRINT", "RETURN", "IF", "ELSE", "SWITCH", "CASE", "DEFAULT", 
                  "END_SWITCH", "PASS", "OPERATOR", "COMPARISON_OP", "BOOLEAN", 
                  "INT", "STRING", "MINUS", "LETTER", "DIGIT", "ID", "LITERAL", 
                  "WS", "NEWLINE" ]

    grammarFileName = "MyLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


